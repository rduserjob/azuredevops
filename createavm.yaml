trigger:
- main

variables:
  vmName: 'osmar-vm'
  resourceGroupName: 'Test_Osmar'
  location: 'eastus'
  adminUsername: 'azureadmin'
  adminPassword: '220912Caramelos1.'
  vmSize: 'Standard_D2s_v3'
  systemDiskName: 'Test-Osmar-Disk'
  dataDiskName: 'Test-Osmar-dataDisk'
  lockName: 'vm-delete-lock'

stages:
- stage: Provision_VM
  displayName: "Provision Windows VM"
  jobs:
  - job: CreateVM
    displayName: "Create Windows Virtual Machine"
    pool:
      vmImage: 'windows-latest'  # Asegura el uso de un agente Windows

    steps:
    - task: AzureCLI@2
      displayName: "Create Resource Group"
      inputs:
        azureSubscription: 'Arroyo_Challenge-Test_Osmar'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az group create --name $(resourceGroupName) --location $(location)

    - task: AzureCLI@2
      displayName: "Create Windows VM with System Disk"
      inputs:
        azureSubscription: 'Arroyo_Challenge-Test_Osmar'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az vm create \
            --resource-group $(resourceGroupName) \
            --name $(vmName) \
            --image Win2022Datacenter \
            --size $(vmSize) \
            --admin-username $(adminUsername) \
            --admin-password $(adminPassword) \
            --os-disk-name $(systemDiskName)

    - task: AzureCLI@2
      displayName: "Install Az Module and Run Software Installation Script"
      inputs:
        azureSubscription: 'Arroyo_Challenge-Test_Osmar'
        scriptType: 'ps'  
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Instalar el módulo Az si no está disponible
          #if (-not (Get-Module -ListAvailable -Name Az)) {
              #Install-Module -Name Az -AllowClobber -Scope CurrentUser -Force
          #}

          # Importar el módulo Az
          #Import-Module Az -Force
          #Write-Host "Az Module imported successfully."

          # Autenticarse usando el token de Azure CLI
          #$token = az account get-access-token --query "accessToken" -o tsv
          #Connect-AzAccount -AccessToken $token -Tenant (az account show --query 'tenantId' -o tsv) `                        -SubscriptionId (az account show --query 'id' -o tsv)

          # Crear credenciales
          $vmUser = "$(adminUsername)"
          $vmPassword = "$(adminPassword)"
          $securePassword = ConvertTo-SecureString $vmPassword -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ($vmUser, $securePassword)

          # Ejecutar un script en la VM usando az vm run-command invoke
          az vm run-command invoke \
          --resource-group $(resourceGroupName) \
          --name $(vmName) \
          --command-id RunPowerShellScript \
          --scripts "Write-Host 'Starting software installation...'; `
          choco install nodejs -y; `
          choco install git -y; `
          choco install vscode -y; `
          choco install openjdk --version=11 -y; `
          Write-Host 'Software installation complete.'; `
          [System.Environment]::GetEnvironmentVariables()"
