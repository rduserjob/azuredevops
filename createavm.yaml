trigger:
- main

variables:
  vmName: 'osmar-vm'
  resourceGroupName: 'Test_Osmar'
  location: 'eastus'
  adminUsername: 'azureadmin'
  adminPassword: '220912Caramelos1.'
  vmSize: 'Standard_D2s_v3'
  systemDiskName: 'Test-Osmar-Disk'
  dataDiskName: 'Test-Osmar-dataDisk'
  lockName: 'vm-delete-lock'

stages:
- stage: Provision_VM
  displayName: "Provision Windows VM"
  jobs:
  - job: CreateVM
    displayName: "Create Windows Virtual Machine"
    pool:
      vmImage: 'windows-latest'  # Asegura el uso de un agente Windows

    steps:
    - task: AzureCLI@2
      displayName: "Create Resource Group"
      inputs:
        azureSubscription: 'Arroyo_Challenge-Test_Osmar'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az group create --name $(resourceGroupName) --location $(location)

    - task: AzureCLI@2
      displayName: "Create Windows VM with System Disk"
      inputs:
        azureSubscription: 'Arroyo_Challenge-Test_Osmar'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az vm create \
            --resource-group $(resourceGroupName) \
            --name $(vmName) \
            --image Win2022Datacenter \
            --size $(vmSize) \
            --admin-username $(adminUsername) \
            --admin-password $(adminPassword) \
            --os-disk-name $(systemDiskName)

- stage: Install_Software
  displayName: "Install Software on VM"
  jobs:
  - job: SoftwareInstall
    displayName: "Run Software Installation Script on VM"
    pool:
      vmImage: 'windows-latest'

    steps:
    - task: AzureCLI@2
      displayName: "Run PowerShell Script for Software Installation"
      inputs:
        azureSubscription: 'Arroyo_Challenge-Test_Osmar'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Asegurarse de que los scripts se puedan ejecutar
          Set-ExecutionPolicy RemoteSigned -Scope Process -Force

          # Instalar Chocolatey si no est√° instalado
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
              Write-Host 'Installing Chocolatey...'
              Set-ExecutionPolicy Bypass -Scope Process -Force
              iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }

          # Ejecutar un script en la VM usando az vm run-command invoke (ahora usando PowerShell)
          az vm run-command invoke \
            --resource-group $(resourceGroupName) \
            --name $(vmName) \
            --command-id RunPowerShellScript \
            --scripts "Write-Host 'Starting software installation...'; `
                       choco install nodejs -y; `
                       choco install git -y; `
                       choco install vscode -y; `
                       choco install openjdk --version=11 -y; `
                       Write-Host 'Software installation complete.'; `
                       [System.Environment]::GetEnvironmentVariables()"

                       choco install vscode -y; `
                       choco install openjdk --version=11 -y; `
                       Write-Host 'Software installation complete.'; `
                       [System.Environment]::GetEnvironmentVariables()"
